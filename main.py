import argparse

from _01_data.download_stock import process_all_stocks
from _01_data.to_mongoDB import process_csv_files, remove_mongoDB

from _02_strategy.analyze_log import extract_log_summary, stock_targer_win

from _02_strategy.bollinger_strategy import run_bolling_list
from _02_strategy.ma_strategy import run_ma_backtest, run_ma_by_stock
from _02_strategy.turtle_strategy import run_turtle_list
from _03_deeplearning.ma_strategy import run_ma_deep
from _03_deeplearning.sma_20_50_d import test_04_train_model, test_05_predict_from_model
from _03_deeplearning.turtle_strategy import run_turtle_deep_list
from _03_deeplearning.unit import test_03_data_view
from modules.config_loader import load_config
from modules.process_mongo import close_mongo_client
import tensorflow as tf
import platform

config = load_config()
stock_list = [
    "5272.TWO",
    "4117.TWO",
    "4980.TWO",
    "6405.TW",
    "3437.TW",
    "1783.TW",
    "8411.TW",
    "1806.TW",
    "3570.TWO",
    "1413.TW",
    "8059.TWO",
    "5371.TWO",
    "3597.TWO",
    "4549.TWO",
    "6438.TW",
    "5345.TWO",
    "3050.TW",
    "6175.TWO",
    "3567.TWO",
    "9918.TW",
    "3434.TWO",
    "2385.TW",
    "3206.TWO",
    "6103.TWO",
    "6016.TWO",
    "8097.TWO",
    "3617.TW",
    "6124.TWO",
    "5227.TWO",
    "4722.TW",
    "2867.TW",
    "1504.TW",
    "5443.TWO",
    "4546.TWO",
    "8261.TW",
    "6294.TWO",
    "6101.TWO",
    "1440.TW",
    "6486.TWO",
    "5426.TWO",
    "3455.TWO",
    "3209.TW",
    "6605.TW",
    "3325.TWO",
    "4197.TWO",
    "1227.TW",
    "6477.TW",
    "8931.TWO",
    "3504.TW",
    "2722.TW",
    "6142.TW",
    "1457.TW",
    "2616.TW",
    "2637.TW",
    "4903.TWO",
    "2467.TW",
    "8021.TW",
    "8091.TWO",
    "9931.TW",
    "8249.TW",
    "8054.TWO",
    "5009.TWO",
    "1438.TW",
    "1608.TW",
    "4106.TW",
    "3591.TW",
    "5522.TW",
    "2597.TW",
    "1256.TW",
    "5209.TWO",
    "6231.TWO",
    "1785.TWO",
    "2440.TW",
    "3360.TWO",
    "3691.TWO",
    "4721.TWO",
    "8040.TWO",
    "5521.TW",
    "6151.TWO",
    "4534.TWO",
    "3520.TWO",
    "2488.TW",
    "3122.TWO",
    "1309.TW",
    "8112.TW",
    "9950.TWO",
    "8084.TWO",
    "3066.TWO",
    "2028.TW",
    "4966.TWO",
    "6269.TW",
    "5285.TW",
    "6190.TWO",
    "1452.TW",
    "4154.TWO",
    "1101.TW",
    "8071.TWO",
    "3624.TWO",
    "2881.TW",
    "5906.TW",
    "8415.TWO",
    "8929.TWO",
    "2497.TW",
    "4538.TWO",
    "9941.TW",
    "2439.TW",
    "2235.TWO",
    "6559.TWO",
    "8423.TWO",
    "4953.TWO",
    "5488.TWO",
    "1402.TW",
    "2427.TW",
    "8473.TW",
    "6568.TWO",
    "3426.TWO",
    "6552.TW",
    "2908.TW",
    "6549.TWO",
    "1723.TW",
    "3678.TWO",
    "8938.TWO",
    "6278.TW",
    "4163.TWO",
    "8284.TWO",
    "1587.TW",
    "1460.TW",
    "8409.TWO",
    "3085.TWO",
    "5202.TWO",
    "5489.TWO",
    "2883.TW",
    "3376.TW",
    "2486.TW",
    "1321.TW",
    "1514.TW",
    "3406.TW",
    "3526.TWO",
    "8277.TWO",
    "3402.TWO",
    "3035.TW",
    "4958.TW",
    "6270.TWO",
    "2882.TW",
    "1735.TW",
    "6167.TWO",
    "2441.TW",
    "1225.TW",
    "1583.TW",
    "3450.TW",
    "8080.TWO",
    "2012.TW",
    "2399.TW",
    "1718.TW",
    "2014.TW",
    "8083.TWO",
    "4116.TWO",
    "8289.TWO",
    "8942.TWO",
    "9912.TW",
    "3259.TWO",
    "6209.TW",
    "2108.TW",
    "2312.TW",
    "5310.TWO",
    "1522.TW",
    "6143.TWO",
    "3710.TWO",
    "5284.TW",
    "6239.TW",
    "8930.TWO",
    "6434.TWO",
    "3130.TW",
    "4711.TWO",
    "6473.TWO",
    "2428.TW",
    "9958.TW",
    "5432.TWO",
    "6493.TWO",
    "3661.TW",
    "5321.TWO",
    "2536.TW",
    "4976.TW",
    "4166.TWO",
    "6015.TWO",
    "2364.TW",
    "3224.TWO",
    "0053.TW",
    "1817.TW",
    "3587.TWO",
    "3032.TW",
    "6109.TWO",
    "2438.TW",
    "9946.TW",
    "5410.TWO",
    "1909.TW",
    "5356.TWO",
    "1477.TW",
    "1565.TWO",
    "5301.TWO",
    "1595.TWO",
    "3530.TW",
    "1906.TW",
    "1229.TW",
    "6415.TW",
    "1580.TWO",
    "3523.TWO",
    "1712.TW",
    "2712.TW",
    "6274.TWO",
    "4123.TWO",
    "5512.TWO",
    "6213.TW",
    "2351.TW",
    "6218.TWO",
    "8932.TWO",
    "9904.TW",
    "6228.TWO",
    "5007.TW",
    "2114.TW",
    "8941.TWO",
    "4114.TWO",
    "2316.TW",
    "3018.TW",
    "6212.TWO",
    "2913.TW",
    "2379.TW",
    "6171.TWO",
    "3017.TW",
    "5864.TWO",
    "6164.TW",
    "3483.TWO",
    "9951.TWO",
    "2640.TWO",
    "8359.TWO",
    "4939.TWO",
    "4560.TW",
    "6174.TWO",
    "4909.TWO",
    "8070.TW",
    "8068.TWO",
    "2924.TWO",
    "4961.TW",
    "4967.TW",
    "2617.TW",
    "2305.TW",
    "5455.TWO",
    "2415.TW",
    "6229.TWO",
    "3081.TWO",
    "2355.TW",
    "5878.TWO",
    "5460.TWO",
    "3498.TWO",
    "8342.TWO",
    "6240.TWO",
    "2886.TW",
    "3583.TW",
    "2107.TW",
    "8027.TWO",
    "8433.TWO",
    "6506.TWO",
    "2903.TW",
    "6589.TWO",
    "8404.TW",
    "3014.TW",
    "4763.TW",
    "2451.TW",
    "3268.TWO",
    "9911.TW",
    "9917.TW",
    "4533.TWO",
    "3515.TW",
    "6147.TWO",
    "6591.TW",
    "3234.TWO",
    "2449.TW",
    "4764.TW",
    "5243.TW",
    "6271.TW",
    "2464.TW",
    "8043.TWO",
    "2436.TW",
    "1570.TWO",
    "3044.TW",
    "3016.TW",
    "4544.TWO",
    "2455.TW",
    "0057.TW",
    "1463.TW",
    "3169.TWO",
    "5425.TWO",
    "9945.TW",
    "9940.TW",
    "3047.TW",
    "3083.TWO",
    "2890.TW",
    "5201.TWO",
    "2207.TW",
    "2480.TW",
    "6148.TWO",
    "9907.TW",
    "2892.TW",
    "6198.TWO",
    "5213.TWO",
    "1589.TW",
    "3141.TWO",
    "5314.TWO",
    "4979.TWO",
    "3349.TWO",
    "9943.TW",
    "1512.TW",
    "2608.TW",
    "5871.TW",
    "2227.TW",
    "6485.TWO",
    "6206.TW",
    "2340.TW",
    "6215.TW",
    "6234.TWO",
    "6266.TWO",
    "1465.TW",
    "3147.TWO",
    "6451.TW",
    "5706.TW",
    "1476.TW",
    "8383.TWO",
    "9136.TW",
    "5438.TWO",
    "8928.TWO",
    "6114.TWO",
    "2308.TW",
    "5274.TWO",
    "2401.TW",
    "6146.TWO",
    "3317.TWO",
    "6150.TWO",
    "2845.TW",
    "3362.TWO",
    "2520.TW",
    "2105.TW",
    "2392.TW",
    "3563.TW",
    "4995.TWO",
    "4952.TW",
    "1736.TW",
    "8074.TWO",
    "6292.TWO",
    "3516.TWO",
    "4305.TWO",
    "9914.TW",
    "8067.TWO",
    "1777.TWO",
    "2801.TW",
    "8916.TWO",
    "6535.TWO",
    "8032.TWO",
    "1312.TW",
    "6588.TWO",
    "3685.TWO",
    "6020.TWO",
    "3045.TW",
    "2904.TW",
    "2359.TW",
    "3492.TWO",
    "2834.TW",
    "8358.TWO",
    "2492.TW",
    "1301.TW",
    "4536.TW",
    "1815.TWO",
    "3557.TW",
    "5903.TWO",
    "2462.TW",
    "3003.TW",
    "3272.TWO",
    "1323.TW",
    "6277.TW",
    "6574.TWO",
    "1560.TW",
    "2221.TWO",
    "1711.TW",
    "6187.TWO",
    "6570.TWO",
    "1568.TW",
    "3533.TW",
    "9929.TW",
    "8039.TW",
    "6276.TWO",
    "6177.TW",
    "1326.TW",
    "2405.TW",
    "3152.TWO",
    "6127.TWO",
    "3708.TW",
    "0056.TW",
    "1530.TW",
    "3213.TWO",
    "3374.TWO",
    "9802.TW",
    "2534.TW",
    "3388.TWO",
    "5248.TWO",
    "3564.TWO",
    "4153.TWO",
    "6184.TW",
    "5312.TWO",
    "3260.TWO",
    "1235.TW",
    "4906.TW",
    "3048.TW",
    "2726.TWO",
    "8114.TW",
    "6548.TWO",
    "1434.TW",
    "2809.TW",
    "1319.TW",
    "6488.TWO",
    "2414.TW",
    "6527.TWO",
    "8354.TWO",
    "5283.TW",
    "5434.TW",
    "4974.TWO",
    "1526.TW",
    "2729.TWO",
    "8424.TWO",
    "6279.TWO",
    "4150.TWO",
    "2327.TW",
    "8464.TW",
    "3265.TWO",
    "5604.TWO",
    "2007.TW",
    "5490.TWO",
    "2444.TW",
    "6160.TWO",
    "3673.TW",
    "3114.TWO",
    "5439.TWO",
    "1702.TW",
    "2466.TW",
    "6196.TW",
    "4919.TW",
    "6186.TWO",
    "6108.TW",
    "3094.TW",
    "2820.TW",
    "3338.TW",
    "4904.TW",
    "4716.TWO",
    "2459.TW",
    "2115.TW",
    "8182.TWO",
    "3707.TWO",
    "3030.TW",
    "4513.TWO",
    "2741.TWO",
    "5536.TWO",
    "8107.TWO",
    "1541.TW",
    "1305.TW",
    "2420.TW",
    "1303.TW",
    "5288.TW",
    "6803.TWO",
    "2885.TW",
    "6465.TWO",
    "1210.TW",
    "6199.TWO",
    "6533.TW",
    "1264.TWO",
    "3051.TW",
    "8028.TW",
    "2596.TWO",
    "3021.TW",
    "8255.TWO",
    "6024.TW",
    "3702.TW",
    "3038.TW",
    "2453.TW",
    "5347.TWO",
    "3029.TW",
    "2301.TW",
    "2889.TW",
    "3430.TWO",
    "4935.TW",
    "3646.TWO",
    "2887.TW",
    "4755.TW",
    "3633.TWO",
    "2546.TW",
    "3285.TWO",
    "4977.TW",
    "3357.TWO",
    "0052.TW",
    "4943.TW",
    "8410.TWO",
    "5340.TWO",
    "9910.TW",
    "2332.TW",
    "2374.TW",
    "1215.TW",
    "4739.TW",
    "9938.TW",
    "4916.TW",
    "5269.TW",
    "3105.TWO",
    "5508.TWO",
    "8926.TW",
    "4130.TWO",
    "2393.TW",
    "1713.TW",
    "3548.TWO",
    "2324.TW",
    "3577.TWO",
    "8042.TWO",
    "5534.TW",
    "6214.TW",
    "3416.TW",
    "5880.TW",
    "8908.TWO",
    "1726.TW",
    "2426.TW",
    "1521.TW",
    "1717.TW",
    "2891.TW",
    "6202.TW",
    "3665.TW",
    "3479.TWO",
    "5474.TWO",
    "1540.TW",
    "1102.TW",
    "6205.TW",
    "8234.TWO",
    "5471.TW",
    "1590.TW",
    "5514.TWO",
    "3537.TWO",
    "3419.TW",
    "6155.TW",
    "1443.TW",
    "1437.TW",
    "2015.TW",
    "3078.TWO",
    "6216.TW",
    "5015.TWO",
    "3217.TWO",
    "3540.TWO",
    "3511.TWO",
    "5863.TWO",
    "8271.TW",
    "4968.TW",
    "9930.TW",
    "8171.TWO",
    "3672.TWO",
    "2633.TW",
    "2313.TW",
    "6615.TWO",
    "4561.TWO",
    "1409.TW",
    "6026.TWO",
    "1410.TW",
    "2431.TW",
    "6541.TW",
    "2330.TW",
    "4938.TW",
    "2912.TW",
    "6416.TW",
    "8489.TWO",
    "6538.TWO",
    "2109.TW",
    "6525.TW",
    "6173.TWO",
    "6498.TWO",
    "5220.TWO",
    "2303.TW",
    "1110.TW",
    "3529.TWO",
    "8933.TWO",
    "4927.TW",
    "2027.TW",
    "3025.TW",
    "2034.TW",
    "2233.TW",
    "4417.TWO",
    "1268.TWO",
    "6590.TWO",
    "2483.TW",
    "3528.TW",
    "4564.TW",
    "9962.TWO",
    "1515.TW",
    "3491.TWO",
    "2477.TW",
    "6407.TWO",
    "3219.TWO",
    "6582.TW",
    "6550.TW",
    "5493.TWO",
    "6610.TWO",
    "1231.TW",
    "5299.TWO",
    "3706.TW",
    "8155.TWO",
    "3324.TWO",
    "4119.TW",
    "9937.TW",
    "4105.TWO",
    "5876.TW",
    "6508.TWO",
    "6577.TWO",
    "2421.TW",
    "8279.TWO",
    "5469.TW",
    "2245.TWO",
    "2383.TW",
    "6624.TWO",
    "3659.TWO",
    "1203.TW",
    "6491.TW",
    "6189.TW",
    "0051.TW",
    "8481.TW",
    "6208.TWO",
    "2377.TW",
    "3527.TWO",
    "8131.TW",
    "8996.TW",
    "3454.TW",
    "1527.TW",
    "6230.TW",
    "4951.TWO",
    "4707.TWO",
    "6156.TWO",
    "6201.TW",
    "3138.TW",
    "2851.TW",
    "6203.TWO",
    "3056.TW",
    "6128.TW",
    "5013.TWO",
    "3026.TW",
    "2375.TW",
    "3596.TW",
    "6161.TWO",
    "6221.TWO",
    "3484.TWO",
    "2916.TWO",
    "6285.TW",
    "2231.TW",
    "1591.TWO",
    "4304.TWO",
    "1773.TW",
    "2527.TW",
    "2059.TW",
    "6409.TW",
    "3541.TWO",
    "2356.TW",
    "8183.TWO",
    "3028.TW",
    "4991.TWO",
    "3581.TWO",
    "5215.TW",
    "1109.TW",
    "6449.TW",
    "4987.TWO",
    "4754.TWO",
    "1536.TW",
    "5902.TWO",
    "6417.TWO",
    "6470.TWO",
    "6469.TWO",
    "6183.TW",
    "5487.TWO",
    "2472.TW",
    "2476.TW",
    "2413.TW",
    "8049.TWO",
    "9908.TW",
    "6023.TWO",
    "2412.TW",
    "3010.TW",
    "8050.TWO",
    "3090.TW",
    "3444.TWO",
    "2884.TW",
    "5289.TWO",
    "2501.TW",
    "1216.TW",
    "2404.TW",
    "2376.TW",
    "9942.TW",
    "4426.TW",
    "0055.TW",
    "1529.TW",
    "8147.TWO",
    "4915.TW",
    "3188.TWO",
    "3611.TWO",
    "5315.TWO",
    "5278.TWO",
    "3380.TW",
    "8016.TW",
    "3465.TWO",
    "1904.TW",
    "1582.TW",
    "4527.TWO",
    "3236.TWO",
    "8109.TWO",
    "5483.TWO",
    "2542.TW",
    "3303.TWO",
    "6166.TW",
    "2395.TW",
    "8341.TW",
    "8034.TWO",
    "2812.TW",
    "1307.TW",
    "6411.TWO",
    "2344.TW",
    "2838.TW",
    "2063.TWO",
    "4563.TWO",
    "4107.TWO",
    "2484.TW",
    "4931.TWO",
    "6245.TWO",
    "9925.TW",
    "3008.TW",
    "5353.TWO",
    "5388.TW",
    "2850.TW",
    "2433.TW",
    "6556.TWO",
    "6558.TW",
    "4551.TW",
    "3088.TWO",
    "1232.TW",
    "3034.TW",
    "9927.TW",
    "4137.TW",
    "3675.TWO",
    "6282.TW",
    "4205.TWO",
    "6257.TW",
    "6112.TW",
    "6560.TWO",
    "2539.TW",
    "6263.TWO",
    "1537.TW",
    "2345.TW",
    "4506.TWO",
    "3023.TW",
    "3071.TWO",
    "8462.TW",
    "2599.TWO",
    "2397.TW",
    "2458.TW",
    "1730.TW",
    "5403.TWO",
]


def download_all_stocks():
    """從 stock_List.csv 讀取股票清單並下載所有股票數據"""
    stock_list_file = config.get("stock_list_path", "./stock_List.csv")
    original_data_folder = config.get("original_data_folder", "./data")
    process_all_stocks(stock_list_file, original_data_folder)


def is_wsl():
    return "microsoft" in platform.uname().release.lower()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="股票數據下載工具")
    parser.add_argument("command", nargs="?", default="download", help="執行指令 (download)")
    args = parser.parse_args()
    if is_wsl():
        gpus = tf.config.list_physical_devices("GPU")
        if gpus:
            try:
                tf.config.experimental.set_memory_growth(gpus[0], True)
                tf.config.set_visible_devices(gpus[0], "GPU")
                print("✅ 已啟用 GPU 加速！")
            except RuntimeError as e:
                print(f"⚠️ 設定 GPU 失敗：{e}")
        else:
            print("🚫 沒有找到 GPU，將使用 CPU 運算。")
    else:
        print("🧩 非 WSL 環境，略過 GPU 設定")

    if args.command == "download":
        download_all_stocks()
    if args.command == "tomongo":
        process_csv_files()
    if args.command == "removemongo":
        remove_mongoDB()
    if args.command == "test":
        run_ma_backtest()
    if args.command == "col_log":
        extract_log_summary()
    if args.command == "test_03_data_view":
        test_03_data_view()
    if args.command == "run_bolling_list":
        run_bolling_list()
    if args.command == "run_turtle_list":
        run_turtle_list()
    if args.command == "stock_targer_win":
        stock_targer_win()
    if args.command == "run_ma_by_stock":
        run_ma_by_stock(
            stock_list=[],
            start_date="2020-01-01",
            end_date="2023-12-31",
        )
        run_ma_by_stock(
            stock_list=stock_list,
            start_date="2020-01-01",
            end_date="2023-12-31",
        )
    if args.command == "test_04_train_model":
        file_path = "./stock_data/leaning_label/sma_20_sma_50_trades.csv"
        model_path = "model_20_50_stream_cnn.h5"
        test_04_train_model(file_path, model_path)

    if args.command == "test_05_predict":
        file_path = "./stock_data/leaning_label/sma_20_sma_50_trades.csv"
        model_path = "model_stream_cnn.h5"
        test_05_predict_from_model(file_path, model_path)

    if args.command == "run_ma_deep":
        model_path = "model_stream_cnn.h5"
        run_ma_deep(start_date="2020-01-01", end_date="2023-12-31", model_path=model_path)
    if args.command == "run_turtle_deep":
        file_path = "./stock_data/leaning_label/turtle_trades.csv"
        model_path = "run_turtle_deep.h5"
        test_04_train_model(file_path, model_path)
        test_05_predict_from_model(file_path, model_path)
        run_turtle_deep_list(start_date="2020-01-01", end_date="2023-12-31", model_path=model_path)
    close_mongo_client()
